

select whole graph:
g.V()

count number of articles:
g.V().hasLabel('article').count()


select most recent article:
g.V().hasLabel('article').order().by('publishedAt', decr).limit(10)


g.V().hasLabel('article').values('publishedAt').fold().order().limit(1)


delete vertices that have source bbb-news:
g.V()
  .hasLabel('article')
  .not(has('source', 'bbc-news'))
  .limit(10)
  .drop()
  
 
select articles that have a similarity relationship > 0.7:
g.V().hasLabel('article').as('a').outE('similarity').has('value', gt(0.7)).inV().as('b')


select all articles where content contains the word sea
g.V().hasLabel('article').has('content', TextP.containing('sea'))

select vertices that have a sport property
g.V().hasLabel('article').has('sport')


get the similarity values in json format
g.V().hasLabel('article').has('title', TextP.containing('bar')).as('Article 1').as('Article 1').outE('similarity').has('value', gt(0.6)).as('Similarity').inV().as('Article 2').select('Similarity', 'Article 1', 'Article 2').limit(1)


